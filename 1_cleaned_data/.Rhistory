}
# prints P(Spam|W1, W2)
for (i in 2:8) {
for (j in 1:7) {
print(paste('P(Spam|', keywords[i], ', ', keywords[j], ') = ',
probSpamGivWords(i, j), sep=''))
}
}
for (i in 2:8) {
for (j in 1:7) {
if (probSpamGivWords(i, j) >= 0) {
print(paste('P(Spam|', keywords[i], ', ', keywords[j], ') = ',
probSpamGivWords(i, j), sep=''))
}
}
}
# prints P(Spam|W1, W2)
for (i in 2:8) {
for (j in 1:7) {
if (probSpamGivWords(i, j) >= 0) {
print(paste('P(Spam|', keywords[i], ', ', keywords[j], ') = ',
probSpamGivWords(i, j), sep=''))
}
}
}
for (i in 2:8) {
for (j in 1:7) {
if (probSpamGivWords(i, j) > 0 && probSpamGivWords(i, j) != NA) {
print(paste('P(Spam|', keywords[i], ', ', keywords[j], ') = ',
probSpamGivWords(i, j), sep=''))
}
}
}
# prints P(Spam|W1, W2)
for (i in 7:8) {
for (j in 5:6) {
if (probSpamGivWords(i, j) != NA) {
print(paste('P(Spam|', keywords[i], ', ', keywords[j], ') = ',
probSpamGivWords(i, j), sep=''))
}
}
}
# prints P(Spam|W1, W2)
for (i in 7:8) {
for (j in 5:6) {
if (probSpamGivWords(i, j) > 0) {
print(paste('P(Spam|', keywords[i], ', ', keywords[j], ') = ',
probSpamGivWords(i, j), sep=''))
}
}
}
# prints P(Spam|W1, W2)
for (i in 7:8) {
for (j in 5:6) {
if (is.na(probSpamGivWords(i, j))) {
print(paste('P(Spam|', keywords[i], ', ', keywords[j], ') = ',
probSpamGivWords(i, j), sep=''))
}
}
}
# prints P(Spam|W1, W2)
for (i in 7:8) {
for (j in 5:6) {
if (!is.na(probSpamGivWords(i, j))) {
print(paste('P(Spam|', keywords[i], ', ', keywords[j], ') = ',
probSpamGivWords(i, j), sep=''))
}
}
}
keywordPairs = c('Bank', 'Discount', 'Travelocity')
for (i in 7:8) {
for (j in 5:6) {
if (!is.na(probSpamGivWords(i, j))) {
print(paste('P(Spam|', keywords[i], ', ', keywords[j], ') = ',
probSpamGivWords(i, j), sep=''))
}
}
}
for (i in 5:6) {
for (j in 7:8) {
if (!is.na(probSpamGivWords(i, j))) {
print(paste('P(Spam|', keywords[i], ', ', keywords[j], ') = ',
probSpamGivWords(i, j), sep=''))
}
}
}
for (i in 7:8) {
for (j in 5:6) {
if (!is.na(probSpamGivWords(i, j))) {
print(paste('P(Spam|', keywords[i-1], ', ', keywords[j], ') = ',
probSpamGivWords(i, j), sep=''))
}
}
}
for (i in 1:500) {
index1 = 0
index2 = 0
for (j in 1:5) {
for (k in 1:7) {
if (data.tr[i, j] == keywords[k]) {
if (index1 == 0) {
index1 = k
}
else {
index2 = k
}
}
}
}
if (index2 == 0) {
if (probSpamGivWord(index1) > 1/2) {
predicted_label[i] = 1
}
else {
predicted_label[i] = 0
}
}
else {
if (probSpamGivWords(index1, index2) > 1/2) {
predicted_label[i] = 1
}
else {
predicted_label[i] = 0
}
}
}
predicted_label = array(dim = 500)
for (i in 1:500) {
index1 = 0
index2 = 0
for (j in 1:5) {
for (k in 1:7) {
if (data.tr[i, j] == keywords[k]) {
if (index1 == 0) {
index1 = k
}
else {
index2 = k
}
}
}
}
if (index2 == 0) {
if (probSpamGivWord(index1) > 1/2) {
predicted_label[i] = 1
}
else {
predicted_label[i] = 0
}
}
else {
if (probSpamGivWords(index1, index2) > 1/2) {
predicted_label[i] = 1
}
else {
predicted_label[i] = 0
}
}
}
# prints P(Spam|W1, W2)
for (i in 7:8) {
for (j in 5:6) {
if (!is.na(probSpamGivWords(i, j))) {
print(paste('P(Spam|', keywords[i-1], ', ', keywords[j], ') = ',
probSpamGivWords(i + 1, j), sep=''))
}
}
}
# P(Spam|W1, W2): probablity an email is spam given two keywords occur in the email
probSpamGivWords = function(i, j) {
return((wordSpamCount[i + 1, j]/500)/(wordCount[i, j]/500))
}
# prints P(Spam|W1, W2)
for (i in 6:7) {
for (j in 5:6) {
if (!is.na(probSpamGivWords(i, j))) {
print(paste('P(Spam|', keywords[i], ', ', keywords[j], ') = ',
probSpamGivWords(i + 1, j), sep=''))
}
}
}
# P(Spam|W1, W2): probablity an email is spam given two keywords occur in the email
probSpamGivWords = function(i, j) {
return((wordSpamCount[i + 1, j]/500)/(wordCount[i, j]/500))
}
# prints P(Spam|W1, W2)
for (i in 6:7) {
for (j in 5:6) {
if (!is.na(probSpamGivWords(i, j))) {
print(paste('P(Spam|', keywords[i], ', ', keywords[j], ') = ',
probSpamGivWords(i, j), sep=''))
}
}
}
# prints P(Spam|W1, W2)
for (i in 7:8) {
for (j in 5:6) {
if (!is.na(probSpamGivWords(i, j))) {
print(paste('P(Spam|', keywords[i], ', ', keywords[j], ') = ',
probSpamGivWords(i, j), sep=''))
}
}
}
# P(Spam|W1, W2): probablity an email is spam given two keywords occur in the email
probSpamGivWords = function(i, j) {
return((wordSpamCount[i + 1, j]/500)/(wordCount[i, j]/500))
}
# prints P(Spam|W1, W2)
for (i in 6:7) {
for (j in 5:6) {
if (!is.na(probSpamGivWords(i, j))) {
print(paste('P(Spam|', keywords[i], ', ', keywords[j], ') = ',
probSpamGivWords(i, j), sep=''))
}
}
}
# prints P(Spam|W1, W2)
for (i in 6:7) {
for (j in 5:6) {
if (!is.na(probSpamGivWords(i-1, j))) {
print(paste('P(Spam|', keywords[i], ', ', keywords[j], ') = ',
probSpamGivWords(i-1, j), sep=''))
}
}
}
# P(Spam|W1, W2): probablity an email is spam given two keywords occur in the email
probSpamGivWords = function(i, j) {
return((wordSpamCount[i + 1, j]/500)/(wordCount[i + 1, j]/500))
}
# prints P(Spam|W1, W2)
for (i in 6:7) {
for (j in 5:6) {
if (!is.na(probSpamGivWords(i, j))) {
print(paste('P(Spam|', keywords[i], ', ', keywords[j], ') = ',
probSpamGivWords(i, j), sep=''))
}
}
}
predicted_label = array(dim = 500)
for (i in 1:500) {
index1 = 0
index2 = 0
for (j in 1:5) {
for (k in 1:7) {
if (data.tr[i, j] == keywords[k]) {
if (index1 == 0) {
index1 = k
}
else {
index2 = k
}
}
}
}
if (index2 == 0) {
if (probSpamGivWord(index1) > 1/2) {
predicted_label[i] = 1
}
else {
predicted_label[i] = 0
}
}
else {
if (probSpamGivWords(index1, index2) > 1/2) {
predicted_label[i] = 1
}
else {
predicted_label[i] = 0
}
}
}
predicted_label
# prints P(Spam|W)
for (i in 1:7) {
print(paste('P(Spam|', keywords[i], ') = ', probSpamGivWord(i), sep=''))
}
# prints P(Spam|W1, W2)
for (i in 6:7) {
for (j in 5:6) {
if (!is.na(probSpamGivWords(i, j))) {
print(paste('P(Spam|', keywords[i], ', ', keywords[j], ') = ',
probSpamGivWords(i, j), sep=''))
}
}
}
if (index2 == 0) {
if (probSpamGivWord(index1) > 1/2) {
predicted_label[i] = 1
}
else {
predicted_label[i] = 0
}
}
# prediction error
prediction_error = 0
for (i in 1:500) {
if (label.tr[i, ] != predicted_label[i]) {
prediction_error = prediction_error + 1
}
}
print(paste('Prediction error: ', prediction_error/500, sep=''))
# modified prediction rules
predicted_label2 = array(dim = 500)
# predicts whether email is spam or not
for (i in 1:500) {
index1 = 0
index2 = 0
for (j in 1:5) {
for (k in 1:7) {
if (data.tr[i, j] == keywords[k]) {
if (index1 == 0) {
index1 = k
}
else {
index2 = k
}
}
}
}
if (index2 == 0) {
if (probSpamGivWord(index1) > 1/2) {
predicted_label2[i] = 1
}
else {
predicted_label2[i] = 0
}
}
# if email contains 'Discount'
else if (index1 == 6 || index2 == 6) {
predicted_label2[i] = 1
}
else {
predicted_label2[i] = 0
}
}
# modified prediction rules
predicted_label_2 = array(dim = 500)
# predicts whether email is spam or not
for (i in 1:500) {
index1 = 0
index2 = 0
for (j in 1:5) {
for (k in 1:7) {
if (data.tr[i, j] == keywords[k]) {
if (index1 == 0) {
index1 = k
}
else {
index2 = k
}
}
}
}
if (index2 == 0) {
if (probSpamGivWord(index1) > 1/2) {
predicted_label_2[i] = 1
}
else {
predicted_label_2[i] = 0
}
}
# if email contains 'Discount'
else if (index1 == 6 || index2 == 6) {
predicted_label_2[i] = 1
}
else {
predicted_label_2[i] = 0
}
}
predicted_label_2
# prediction error
prediction_error_2 = 0
for (i in 1:500) {
if (label.tr[i, ] != predicted_label_2[i]) {
prediction_error_2 = prediction_error_2 + 1
}
}
print(paste('Prediction error: ', prediction_error_2/500, sep=''))
# counts number of spam emails
probSpam = 0
for (i in 1:500) {
if (label.tr[i,] == 1) {
probSpam = probSpam + 1
}
}
probSpam = probSpam/500
# P(W|Spam): probabily a keyword occurs in an email given the email is spam
probWordGivSpam = function(i) {
return((wordSpamCount[1, i]/500)/probSpam)
}
# prints P(W|Spam)
for (i in 1:7) {
print(paste('P(', keywords[i], '|Spam) = ', probWordGivSpam(i), sep=''))
}
data.tr = read.table('training_data.txt', sep='')
label.tr = read.csv('training_label.csv', header=F)
as.matrix(label.tr)
# keywords in email
keywords = c('Hello', 'The', 'Hey', 'Yo', 'Bank', 'Discount', 'Travelocity')
# matrix storing number of emails containing keywords alone (first row) and in pairs
wordProb = matrix(NA, nrow=8, ncol=7)
# counts number of times given word occurs in emails
probWord = function(word) {
count = 0
for (i in 1:500) {
for (j in 1:5) {
if (data.tr[i, j] == word) {
count = count + 1
}
}
}
return(count/500)
}
for (i in 1:7) {
wordCount[1, i] = prob(keywords[i])
}
data.tr = read.table('training_data.txt', sep='')
label.tr = read.csv('training_label.csv', header=F)
as.matrix(label.tr)
# keywords in email
keywords = c('Hello', 'The', 'Hey', 'Yo', 'Bank', 'Discount', 'Travelocity')
# matrix storing number of emails containing keywords alone (first row) and in pairs
wordProb = matrix(NA, nrow=8, ncol=7)
# counts number of times given word occurs in emails
probWord = function(word) {
count = 0
for (i in 1:500) {
for (j in 1:5) {
if (data.tr[i, j] == word) {
count = count + 1
}
}
}
return(count/500)
}
for (i in 1:7) {
wordProb[1, i] = prob(keywords[i])
}
data.tr = read.table('training_data.txt', sep='')
label.tr = read.csv('training_label.csv', header=F)
as.matrix(label.tr)
# keywords in email
keywords = c('Hello', 'The', 'Hey', 'Yo', 'Bank', 'Discount', 'Travelocity')
# matrix storing number of emails containing keywords alone (first row) and in pairs
wordProb = matrix(NA, nrow=8, ncol=7)
# counts number of times given word occurs in emails
probWord = function(word) {
count = 0
for (i in 1:500) {
for (j in 1:5) {
if (data.tr[i, j] == word) {
count = count + 1
}
}
}
return(count/500)
}
for (i in 1:7) {
wordProb[1, i] = probWord(keywords[i])
}
data.tr = read.table('training_data.txt', sep='')
label.tr = read.csv('training_label.csv', header=F)
as.matrix(label.tr)
data.tr = read.table('training_data.txt', sep='')
label.tr = read.csv('training_label.csv', header=F)
as.matrix(label.tr)
install.packages('tinytex')
tinytex::install_tinytex() # takes a while
Data.OWI <- read.csv("data/RossOilWomenIslamData.csv")
head(Data.OWI)
femlabor.islamlo <- Data.OWI$femlabor[Data.OWI$islam <= 0]
femlabor.islamhi <- Data.OWI$femlabor[Data.OWI$islam > 0]
abs(mean(femlabor.islamlo)) - abs(mean(femlabor.islamhi))
femlabor.islamhi.oillo <- Data.OWI$femlabor[(Data.OWI$islam > 0) &
(Data.OWI$oil <= 0)]
femlabor.islamhi.oilhi <- Data.OWI$femlabor[(Data.OWI$islam > 0) &
(Data.OWI$oil > 0)]
abs(mean(femlabor.islamhi.oillo)) - abs(mean(femlabor.islamhi.oilhi))
femlabor.islamhi.oillo <- Data.OWI$femlabor[(Data.OWI$islam > 0) &
(Data.OWI$oil <= 0)]
femlabor.islamhi.oilhi <- Data.OWI$femlabor[(Data.OWI$islam > 0) &
(Data.OWI$oil > 0)]
mean(femlabor.islamhi.oillo)
mean(femlabor.islamhi.oilhi)
movies <- read.table("1_movie_titles_metadata_clean.txt", sep = "\t")
setwd("~/Documents/iw/cleaned_data")
movies <- read.table("1_movie_titles_metadata_clean.txt", sep = "\t")
View(movies)
characters1 <- read.table("1_movie_characters_metadata_clean.txt", sep = "\t")
movies <- read.table("1_movie_titles_metadata_clean.txt", sep = "\t")
View(movies)
movies <- read.table("1_movie_titles_metadata_clean.txt", sep = "\t")
View(movies)
names(movies) <- c("id", "title", "year", "rating", "votes", "genres")
plot(density(movies$year))
barplot(movies$year)
barplot(density(movies$year))
barplot(density(movies$year))
barplot(movies$year)
barplot(frequency(movies$year))
frequency(movies$year)
frequency(movies$year)
movies$int.year <- as.numeric(as.character(movies$year))
frequency(movies$year)
frequency(movies$int.year)
frequency(movies$int.year)
barplot(movies$int.year)
barplot(frequency(movies$int.year))
table(movies$year)
hist(movies$int.year)
hist(movies$int.year, breaks = 17)
hist(movies$int.year, breaks = 83)
